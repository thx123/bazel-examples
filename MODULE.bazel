module(name = "bazel-examples", version = "1.0.0")

# 3rd party module dependencies in Bazel Central Registry: https://registry.bazel.build/
# Note: "com_google_absl" alias name is required by status_macros module,
# which still uses the old WORKSPACE based repo definition.
# Background: https://bazel.build/external/migration
bazel_dep(name = "abseil-cpp", version = "20230802.0", repo_name = "com_google_absl")
single_version_override(
    module_name = "abseil-cpp",
    patch_strip = 1,
    patches = ["//cfg-bazel/third_party/abseil-cpp:abseil-cpp.patch"],
    version = "20230802.0",
)
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_go", version = "0.44.0")
bazel_dep(name = "rules_proto", version = "5.3.0-21.7")
bazel_dep(name = "rules_proto_grpc", version = "5.0.0-alpha2")
bazel_dep(name = "rules_proto_grpc_cpp", version = "5.0.0-alpha2")
bazel_dep(name = "rules_proto_grpc_go", version = "5.0.0-alpha2")
bazel_dep(name = "rules_proto_grpc_python", version = "5.0.0-alpha2")

bazel_dep(name = "rules_python", version = "0.28.0")
# Ensure hermetic Python version 3.10 across all build targets
# Reference: https://github.com/bazelbuild/rules_python/blob/main/examples/multi_python_versions/MODULE.bazel
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
# # Fix for rules_python when running as root:
# # https://github.com/bazelbuild/rules_python/issues/1169
# python_register_toolchains(
#     name = "custom_python_toolchain",
#     python_version = "PY3",
#     ignore_root_user_error = True,
# )
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have mulitple toolchain versions.
    # is_default = True,
    python_version = "3.10",
)
use_repo(
    python,
    python = "python_versions",
)
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.10",
    requirements_lock = "//cfg-bazel/py/requirements:requirements-lock-3-10.txt",
)
use_repo(pip, "pypi")

# This is supposed to be a better way to have a Hermetic Python environment, but
# an opaque error occurs at a line below. Will look into it further when time permits.
# Background:
# https://docs.aspect.build/rulesets/aspect_rules_py/
# https://github.com/aspect-build/rules_py/releases/tag/v0.5.0
# bazel_dep(name = "aspect_rules_py", version = "0.5.0")
# bazel_dep(name = "rules_python", dev_dependency = True, version = "0.28.0")
# python = use_extension("@rules_python//python/extensions:python.bzl", "python")
# >>> Error line: "unknown attribute name provided" 
# python.toolchain(
#     name = "python3",
#     configure_coverage_tool = True,
#     python_version = "3.11",
# )
# use_repo(python, "python3_toolchains")
# register_toolchains(
#     "@python3_toolchains//:all",
# )

bazel_dep(name = "abseil-py", version = "1.4.0")
bazel_dep(name = "pybind11_bazel", version = "2.11.1")
python_configure = use_extension("@pybind11_bazel//:python_configure.bzl", "extension")
python_configure.toolchain(python_version = "3")
use_repo(python_configure, "local_config_python", "pybind11")

bazel_dep(name = "gflags", version = "2.2.2")
#bazel_dep(name = "glog", version = "0.6.0")
bazel_dep(name = "googletest", version = "1.14.0.bcr.1")
bazel_dep(name = "grpc", version = "1.48.1.bcr.2")
# bazel_dep(name = "protobuf", version = "21.7")
# To cross-compile grpc for AARCH64, boringssl has be to be overridden to use
# its master-with-bazel branch per https://github.com/grpc/grpc/issues/30257
bazel_dep(name = "boringssl", version = "0.0.0-20211025-d4f1ab9")
# boringssl's master-with-bazel branch would not work out of the box, and but
# fail with the " MODULE.bazel expected but not found" error b/c it is still
# using the deprecated WORKSPACE instead of bzlmod. A local patch is provided
# below to add the missing MODULE.bazel file and the necessary dependency
# modules.
git_override(
    module_name = "boringssl",
    patch_strip = 1,
    patches = ["//cfg-bazel/third_party/boringssl:boringssl.patch"],
    commit = "c90d895936b273f9ebb1057b386ca3e862f5312a",
    remote = "https://github.com/google/boringssl.git",
)

# For STM32 cross-platform compilation
bazel_dep(name = "aspect_bazel_lib", version = "2.0.0", dev_dependency = True)
bazel_dep(name = "bazel_skylib", version = "1.5.0", dev_dependency = True)
bazel_dep(name = "platforms", version = "0.0.8", dev_dependency= True)

# For external dependencies built by CMake, etc.
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

# 3rd party dependencies not in Bazel Central Registry
non_module_deps = use_extension("deps.bzl", "non_module_dependencies")
# 3rd party Bazel dependencies as is
use_repo(non_module_deps, "status_macros")  # for Abseil-cpp's RETURN_IF_ERROR and ASSIGN_OR_RETURN macros
# 3rd party non-Bazel dependencies not in Bazel Central Registry
use_repo(non_module_deps, "zeromq")  # cppzmq depends on this
use_repo(non_module_deps, "cppzmq")  # this is a header only library
# Special compiler dependency repos
use_repo(non_module_deps, "x86_64_aarch64_none_linux_gnu")  # for cross-compiling C/C++ for AARCH64 (ARM)
register_toolchains("@//:x86_64_aarch64_none_linux_gnu_toolchain")

bazel_dep(name = "arm_none_eabi", version = "1.0.0")
git_override(
    module_name = "arm_none_eabi",
    commit = "7311e3e51e7b76c09b476a4252e7bd82c8afa58b",
    remote = "https://github.com/thx123/bazel-arm-none-eabi.git",
)
register_toolchains("@arm_none_eabi//toolchain:all")
arm_none_eabi_ext = use_extension("@arm_none_eabi//:extensions.bzl", "arm_none_eabi_extension")
arm_none_eabi_ext.toolchain(version = "9.2.1")
use_repo(
    arm_none_eabi_ext,
    "arm_none_eabi_darwin_x86_64",
    "arm_none_eabi_linux_aarch64",
    "arm_none_eabi_linux_x86_64",
    "arm_none_eabi_windows_x86_64",
)
# For STM32G4
register_toolchains("@//cfg-bazel/toolchains/arm_none_eabi:all")
